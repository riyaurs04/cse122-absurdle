// Riya Urs
// 11/3/22
// CSE 122
// TA: Karen Haining
// Name of program: Absurdle

// Absurdle allows users to play a game of absurdle: 
// an adversarial game of wordle where the manager attempts to make the game 
// as hard as possible by revealing as little information on each round as 
// possible, changing the secret word in response to guesses as necessary. 

import java.util.*;
import java.io.*;

public class Absurdle  {
    public static final boolean DEBUG = false;

    // [[ ALL OF MAIN PROVIDED ]]
    public static void main(String[] args) throws FileNotFoundException {
        Scanner console = new Scanner(System.in);
        System.out.println("Welcome to the game of Absurdle.");

        System.out.print("What dictionary would you like to use? ");
        String dictName = console.next();

        System.out.print("What length word would you like to guess? ");
        int wordLength = console.nextInt();

        List<String> contents = loadFile(new Scanner(new File(dictName)));
        Set<String> words = pruneDictionary(contents, wordLength);

        if (DEBUG) 
            System.out.println("words: " + words);

        List<String> guessedPatterns = new ArrayList<>();
        while (!isFinished(guessedPatterns)) {
            System.out.print("> ");
            String guess = console.next();
            String pattern = record(guess, words, wordLength);
            guessedPatterns.add(pattern);
            System.out.println(": " + pattern);
            System.out.println();
        }
        System.out.println("Absurdle " + guessedPatterns.size() + "/âˆž");
        System.out.println();
        printPatterns(guessedPatterns);
    }

    // [[ PROVIDED ]]
    public static void printPatterns(List<String> list) {
        for (String s : list) {
            System.out.println(s);
        }
    }

    // [[ PROVIDED ]]
    public static boolean isFinished(List<String> patterns) {
        if (patterns.isEmpty()) { // haven't guessed anything yet, so game isn't finished!
            return false;
        }
        String lastPattern = patterns.get(patterns.size() - 1); // get the pattern generated by the most recent guess
        return !lastPattern.contains("â¬œ") && !lastPattern.contains("ðŸŸ¨"); // must be all green to "win"
    }

    // [[ PROVIDED ]]
    public static List<String> loadFile(Scanner dictScan) {
        List<String> contents = new ArrayList<>();
        while (dictScan.hasNext()) {
            contents.add(dictScan.next());
        }

        return contents;
    }

    // This method returns a set that only contains words from the dictionary that are the length
    // that the user specified.
    // Parameters:
    //      - contents: the dictionary containing all words
    //      - wordLength: the length of the word being guessed
    // Returns:
    //      - Set<String>: a set containing words that are the length specified by the user
    // Exceptions:
    //      - IllegalArgumentException: thrown when the wordlength is less than 1
    public static Set<String> pruneDictionary(List<String> contents, int wordLength) {
        if(wordLength < 1) {
            throw new IllegalArgumentException("The word must be at least 1 letter long");
        }
        Set<String> words = new TreeSet<String>();
        for(int i = 0; i < contents.size(); i++) {
            String word = contents.get(i);
            if(word.length() == wordLength) {
                words.add(word);
            }
        } return words;
    }

    // This method uses the user's guess to determine the next set of words to be examined as the 
    // game continues. 
    // Parameters: 
    //      - guess: the word that the user guesses
    //      - words: the set containing words that are the length of the word being guessed
    //      - wordLength: the length of the word being guessed
    // Returns:
    //      - String: the pattern based on the user's guess
    // Exceptions: 
    //      - IllegalArgumentException: thrown when the set of words is empty or when the guess does 
    //        not have the correct length
    public static String record(String guess, Set<String> words, int wordLength) {
        if(words.isEmpty() || guess.length() != wordLength) {
            throw new IllegalArgumentException("Guess is not the correct length or the set is empty");
        }
        Map<String, Set<String>> map = new TreeMap<String, Set<String>>();
        for(String w: words) {
            String s = patternFor(w, guess);
            if(!map.containsKey(s)) {
                map.put(s, new TreeSet<>());
            }
            Set<String> set = map.get(s);
            set.add(w);
        }
        int max = 0;
        String largestKey = "";
        for(String key: map.keySet()) {
            int size = map.get(key).size();
            if(size > max) {
                max = size;
                largestKey = key;
            }
        }
        words.clear();
        for(String w: map.get(largestKey)) {
            words.add(w);
        }
        return largestKey;
    }

    // Assumes that the given word is the same length as the given guess. 
    // Returns a wordle pattern of blocks for the given guess, compared to the 
    // given word. 
    public static String patternFor(String word, String guess) {
        for (int i = 0; i < guess.length(); i++) {
            if(word.charAt(i) == guess.charAt(i)) {
                guess = replaceCorrectCharacters(guess, i);
                word = replaceCorrectCharacters(word, i);
            }
        }
        for (int i = 0; i < guess.length(); i++) {
            char temp = guess.charAt(i);
            if(word.contains(Character.toString(temp)) && Character.isLetter(temp)) {
                guess = guess.replaceFirst(Character.toString(temp), "*");
                word = word.replaceFirst(Character.toString(temp), "*");
            }
        }
        for (int i = 0; i < guess.length(); i++) {
            Character temp = guess.charAt(i);
            if(Character.isLetter(temp)) {
                guess = guess.replace(Character.toString(temp), "?");
            }
        }
        for (int i = 0; i < guess.length(); i++) {
            guess = guess.replace("!", "ðŸŸ©");
            guess = guess.replace("*", "ðŸŸ¨");
            guess = guess.replace("?", "â¬œ");
        }
        return guess;
    }

    // This method replaces the correctly guessed letters in the user's guess with an exclamation 
    // point.
    // Parameters:
    //      - word: the user's guessed word in letters
    //      - index: the index of the correctly guessed letter
    // Returns:
    //      - String: the user's guessed word in characters (! signifying that the letter is
    //        in the correct location)
    public static String replaceCorrectCharacters(String word, int index) {
        return word.substring(0, index) + "!" + word.substring(index+1);
    }
}
